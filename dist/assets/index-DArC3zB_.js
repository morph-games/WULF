(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const r of n)if(r.type==="childList")for(const i of r.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&s(i)}).observe(document,{childList:!0,subtree:!0});function e(n){const r={};return n.integrity&&(r.integrity=n.integrity),n.referrerPolicy&&(r.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?r.credentials="include":n.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(n){if(n.ep)return;n.ep=!0;const r=e(n);fetch(n.href,r)}})();const A=320,K=200,z={up:[0,-1],down:[0,1],left:[-1,0],right:[1,0]},Y=20,P=5,$={main:{url:"./images/wulf-spritesheet-8.png",size:16,atlas:[{names:["grass-0","grass-1","grass-2","grass-3","forest-0","forest-1","forest-2","forest-3","mountain-0","mountain-1","mountain-2","mountain-3","mountain-door","circle","village","town","city"]},{names:["water-0","void","","","","","","","water-1","","","","","","","","stone-wall-0","stone-wall-1","stone-door-open","stone-window"]},{names:["dirt","floor-0","floor-1","floor-2","floor-3","floor-4","floor-5","floor-6"]},{names:["ladder-down","ladder-up","magic-ladder-down","magic-ladder-up","horseback","flying-carpet","sailboat","galleon","flying-broom"]},{names:["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T"]},{names:["U","V","W","X","Y","Z","rune-A","rune-B","rune-C","rune-D","rune-E","rune-F","rune-G","rune-H","rune-I","rune-J","rune-K","rune-L","rune-M","rune-N"]},{names:["rune-O","rune-P","rune-Q","rune-R","rune-S","rune-T","rune-U","rune-V","rune-W","rune-X","rune-Y","rune-Z","rune-TH","rune-EE","rune-NG","rune-EA","rune-ST","rune-space","stone-sign-left","stone-sign-right"]},{names:["spearman-0","spearman-1","spearman-2","spearman-3","beastman-0","","","","king-0"]}]},fonts:{url:"./images/letters-spritesheet-5.png",size:8,atlas:[{names:["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","th","ee","ng","ea","st"," ","0","1","2","3","4","5","6","7","8","9","10","-","=",";",",",".","'","/"]},{names:["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","TH","EE","NG","EA","ST"," ","ankh","!","@","#","$","%","^","&","*","(",")","_","+",":","<",">",'"',"?"]},{names:["rune-A","rune-B","rune-C","rune-D","rune-E","rune-F","rune-G","rune-H","rune-I","rune-J","rune-K","rune-L","rune-M","rune-N","rune-O","rune-P","rune-Q","rune-R","rune-S","rune-T","rune-U","rune-V","rune-W","rune-X","rune-Y","rune-Z","Trune-H","Erune-E","Nrune-G","Erune-S","Srune-T","rune-space"]}]}},q={entity:{sprite:"void",x:0,y:0,obstacleId:0},terrain:{type:"entity",isTerrain:!0},void:{type:"terrain",sprite:"void",obstacleId:0},dirt:{type:"terrain",sprite:"dirt",obstacleId:6},grass:{type:"terrain",sprite:"grass-0",obstacleId:5},water:{type:"terrain",sprite:"water",variations:2,obstacleId:2},forest:{type:"terrain",sprite:"forest-0",obstacleId:10},mountain:{type:"terrain",sprite:"mountain-0",obstacleId:11},wall:{type:"terrain",sprite:"stone-wall-0",obstacleId:1},door:{type:"terrain",sprite:"stone-door-open",obstacleId:0},window:{type:"terrain",sprite:"stone-window",obstacleId:1},floor:{type:"terrain",sprite:"floor-0",obstacleId:7},tileFloor:{type:"terrain",sprite:"floor-2",obstacleId:7},signLeft:{type:"terrain",sprite:"stone-sign-left",obstacleId:1},signRight:{type:"terrain",sprite:"stone-sign-right",obstacleId:1},destination:{type:"entity",investigate:{message:"You see {{name}}."},enter:{},sprite:"mountain-door",isDestination:!0},town:{type:"destination",sprite:"town"},city:{type:"destination",sprite:"city"},village:{type:"destination",sprite:"village"},dungeon:{type:"destination",sprite:"mountain-door"},prop:{type:"entity",isProp:!0},ladderDown:{type:"prop",sprite:"ladder-down",klimb:"down"},ladderUp:{type:"prop",sprite:"ladder-up",klimb:"up"},actor:{type:"entity",isActor:!0,action:{queue:[],cooldown:1},move:{speed:1,transversal:[1,0,0,0,.5,1,1.1,1.2,.5,.9,.8,0,0,0,0]},klimbSpeed:1,health:99,canEnter:!1,canExit:!1,obstacleId:13},avatar:{type:"actor",isAvatar:!0,sprite:"spearman-0",canEnter:!0,canExit:!0},king:{type:"actor",sprite:"king-0"},guard:{type:"actor",sprite:"spearman-2",plan:{randomMove:.5}},sentry:{type:"actor",sprite:"spearman-2"},item:{type:"entity",isItem:!0}},j={name:"Lands of Lord Lunic",scale:"overworld",map:["~~~~~........~~~....~~~~~~~~~~~","~~~~.........~~~....~~~~~~~~~~~","~~~~..ff.....f~..f..~~~~~","~~~...^f.G...ffffff.~~~~~","~~~..^^^.......fffff.~~~~","~~~..^^^........3fff...","~~~..^^........fffff..","~~~.^^^^.........ff..","~~~..^^D....2....ff..","~~~~..^...........f..","~~~...^.............~~~~.1~~","~~~........f..~~~~..~~~~~.f~","~~~.f^...^^^f....~~~~","~~~.f^^.^^^^ff~~~~~~~","~~~~^^...f^^ffff~~~~~","~~~~^.~..f^^^fff~~~~~","~~~~~~~f.ff^fff^~~~~~","~~~...ff...ff.^^^.1~~","~~~.........^^^^^^^^.","~~..~........ff.^^^^^","~~~~~~........f..~...","~~~~~~~.~~.......~..~"],legend:{f:["forest"],1:["grass","village"],2:["grass","town"],3:["grass",{type:"city",enter:["castle1"]}],D:["mountain","dungeon"],K:["grass",{type:"king"}],G:["grass","guard"]},overflow:"water",exits:{edges:"LOOP"}},F={name:"Castle Albarix",map:[".....................",".###################.",".#~~~-----------~~~#.",".#~~~----###----~~~#.",".#~~-----(K)-----~~#.",".#~---------------~#.",".#-----------------#.",".#-S-------------S-#.",".#########-#########.",".%F.....F---F.....F%.",".%F......---......F%.",".###U####---####U###.",".#------#---#------#.",".#------#---#------#.",".#---G--#---####U###.",".%------U----------%.",".#------#----------#.",".####U###---######U#.",".#------#---#----#-#.",".#------#---#----#-#.",".#------#---#----U-#.",".#------#---######-#.",".########---#----#-#.",".#------U---#----U-#.",".#------#---#----#-#.",".#-####-#---######U#.",".#-G----#---#------#.",".#------#---#------#.",".####U###---######U#.",".#------#---#--G---#.",".#-->---#---#------#.",".######%#UUU#%######.","..ff..:::::::::..ff..","......:.~~~~~.:......","......:.~~~~~.:......",".####.:.~~~~~.:.####.",".#--S::.......::S--#.",".##%#.:::---:::.#%##.","....................."],legend:{U:["door"],"%":["window"],F:["forest"],S:["floor","sentry"],G:["floor","guard"],K:["floor","king"],"(":["signLeft"],")":["signRight"],">":["floor",{type:"ladderDown",klimb:"down"}]},overflow:"grass",entrance:["center","bottom"],exits:{edges:["overworld",16,4],down:["castle1B",-1,-1]}},B={name:"Castle Albarix Cellar",map:["###################","#~~#-----------#~~#","#~~#----###----#~~#","#~~#-----------#~~legend:{U:["door"],G:["floor","guard"],"<":["floor",{type:"ladderUp",klimb:"up"}]},entrance:["center","bottom"],exits:{edges:"BLOCK",up:["castle1",1,1]}},G={spritesheets:$,screen:{containerSelector:"#screen",mainCanvasId:"main-canvas",height:K,width:A},mainConsole:{horizontal:"left",vertical:"bottom",rows:4,columns:A/8-10},world:{obstacleTypes:["none","impassable physical obstacle","deep ocean","shallow water","swamp","plains","path","road","desert","hills","forest","low mountains","high mountains","short physical obstacle","lava","magical barrier",""],entityTypes:q,maps:{overworld:j,castle1:F,castle1B:B},globalLegend:{".":["grass"],":":["dirt"],"~":["water"],"^":["mountain"],f:["forest"],"-":["floor"],"#":["wall"]},timing:{actionCooldown:20,actionCooldownRandom:4,actionWarmup:5,actionWarmupRandom:0,overworldEating:100,townEating:1e4,regen:120}},stats:{min:0,max:99,list:[{name:"Strength"}]},start:{mapKey:"overworld",coordinates:[10,10]},states:{direction:{kb:{ArrowUp:"up",ArrowDown:"down",ArrowLeft:"left",ArrowRight:"right",w:"up",s:"down",a:"left",d:"right",q:"abort",Escape:"abort",Enter:"abort"," ":"abort"}},stats:{kb:{q:"close",Escape:"close",Enter:"next"," ":"next"}},ready:{kb:{w:"ready weapon",a:"ready armor",s:"ready spell",q:"abort",Escape:"abort",Enter:"abort"," ":"abort"}},cast:{kb:{ArrowUp:"up",ArrowDown:"down",w:"up",s:"down",q:"abort",Escape:"abort",Enter:"abort"," ":"abort"}},item:{kb:{ArrowUp:"up",ArrowDown:"down",w:"up",s:"down",q:"abort",Escape:"abort",Enter:"abort"," ":"abort"}},navigate:{},travel:{kb:{ArrowUp:"go up",ArrowDown:"go down",ArrowLeft:"go left",ArrowRight:"go right",Tab:"toggle party",Enter:"chat","/":"command",0:"party return",1:"party 1"," ":"pass","-":"volume down","=":"volume up","+":"volume up",a:"go left",b:"board",c:"cast",d:"go right",e:"engage",f:"fight direction",g:"get",G:"get all",h:"hole up",i:"investigate",j:"junk item",k:"klimb",l:"look direction",m:"map",n:"navigate",o:"open direction",p:"pickpocket",q:"quicksave",Q:"quit and save",r:"ready item",s:"go down",t:"talk",u:"use item",v:"view toggle",w:"go up",x:"eXit",y:"yell",z:"ztats"}}},actions:{board:{cooldown:1},camp:{cooldown:2},cast:{cooldown:1},engage:{cooldown:0},enter:{cooldown:1},dismount:{cooldown:.6},fight:{cooldown:1},fire:{cooldown:1},get:{cooldown:.6},heal:{cooldown:2},hyperjump:{cooldown:.1},ignite:{cooldown:.6},investigate:{cooldown:2},junk:{cooldown:.8},jump:{cooldown:.1},jimmy:{cooldown:2},klimb:{cooldown:1,warmup:.9},launch:{cooldown:.1},locate:{cooldown:.1},mix:{cooldown:3},move:{cooldown:1},navigate:{cooldown:3},negate:{cooldown:.9},open:{cooldown:.5},offer:{cooldown:1},pass:{cooldown:1},pickpocket:{cooldown:.5,warmup:2},peer:{cooldown:1},plan:{cooldown:1},push:{cooldown:1},ready:{cooldown:.9},summon:{cooldown:1},talk:{cooldown:1},transact:{cooldown:2},unlock:{cooldown:2},warmup:{cooldown:.6},yell:{cooldown:.1}}};class b{constructor(t){if(this.fss=t,this.cursorRow=0,this.cursorCol=0,!t)throw new Error("Missing fonts spritesheet")}static splitText(t,e){if(t.length<=e)return[t];const s=t.split(" "),n=[];let r="";return s.forEach(i=>{i.length>e&&console.warn("Word exceeds max length",i,e);const a=r?`${r} ${i}`:i;a.length>e?(n.push(r),r=i):r=a}),n.push(r),n}async setup(){await this.fss.load()}setCursor(t,e){typeof t=="number"&&(this.cursorCol=t),typeof e=="number"&&(this.cursorRow=e)}drawLetter(t,e){try{this.fss.drawImageToContext(e,t,this.cursorCol*this.fss.spriteSize,this.cursorRow*this.fss.spriteSize)}catch(s){console.warn("Error drawing letter",e,s)}this.cursorCol+=1}drawTextRows(t,e=[],s=void 0,n=void 0){this.setCursor(s,n);const r=this.cursorCol;e.forEach(i=>{i.split("").forEach(a=>{this.drawLetter(t,a)}),this.cursorRow+=1,this.cursorCol=r})}drawText(t,e="",s=void 0,n=void 0){if(this.setCursor(s,n),e instanceof Array){this.drawTextRows(t,e,s,n);return}e.split("").forEach(r=>{this.drawLetter(t,r)})}lineBreak(){this.cursorCol=0,this.cursorRow+=1}drawLine(t,e="",s=void 0,n=void 0){this.drawText(t,e,s,n),this.lineBreak()}}class X{constructor(t,e=320,s=200){var n;this.elementId=t,this.canvas=document.getElementById(t),this.ctx=(n=this.canvas)==null?void 0:n.getContext("2d"),this.width=Number(e)||320,this.height=Number(s)||200}setup(){this.canvas=document.getElementById(this.elementId),this.ctx=this.canvas.getContext("2d")}removePixelTransparency(t=200){const{ctx:e}=this;e.imageSmoothingEnabled=!1;const s=e.getImageData(0,0,this.width,this.height);for(let n=0;n<s.data.length;n+=4){const r=s.data[n+3];s.data[n+3]=r>t?255:0}e.putImageData(s,0,0)}}class V{constructor(t={},e=null){this.fontsSpritesheet=e,this.horizontal=t.horizontal||"left",this.vertical=t.vertical||"top",this.fontSize=t.fontSize||8,this.columns=t.columns||"max",this.rows=t.rows||4,this.inputLine=typeof t.inputLine>"u"?!0:!!t.inputLine,this.textRows=this.rows-(this.inputLine?1:0),this.cursor=t.cursor||">",this.gameCanvas=t.gameCanvas,this.textCtrl=new b(e),this.log=[]}async setup(t){this.gameCanvas=t,await this.textCtrl.setup(),typeof this.columns!="number"&&(this.columns=Math.floor(this.gameCanvas.width/this.fontSize))}getRowBase(){var t;return this.vertical==="bottom"?Math.floor((((t=this.gameCanvas)==null?void 0:t.height)||0)/this.fontSize)-this.rows:0}getPrintableLines(){const t=this.cursor.length,e=" ".repeat(t),s=[];this.log.slice(-this.textRows).forEach(l=>{b.splitText(l,this.columns-t).forEach((c,h)=>{s.push(`${h===0?this.cursor:e}${c}`)})});const n=s.slice(-this.textRows),i=n.length<this.textRows?this.textRows-n.length:0;return[..." ".repeat(i).split("").map(()=>".".repeat(this.columns)),...n]}printLine(t,e=0){const s=this.getRowBase()+e,{ctx:n}=this.gameCanvas,r=t.length<this.columns?this.columns-t.length:0;this.textCtrl.drawLine(n,t+" ".repeat(r),0,s)}printLines(t){(t||this.getPrintableLines()).forEach((s,n)=>this.printLine(s,n))}printCursor(){const t=this.getRowBase()+this.rows-1,{ctx:e}=this.gameCanvas;this.textCtrl.drawLine(e,this.cursor,0,t)}print(t){this.log.push(t),this.printLines(),this.printCursor()}}class H{constructor(t){this.gameName=t||"MyGame"}getObject(t){const e=localStorage.getItem(`${this.gameName}_${t}`);return typeof e!="string"?null:JSON.parse(e)}setObject(t,e=null){localStorage.setItem(`${this.gameName}_${t}`,JSON.stringify(e))}loadSavesList(){return this.getObject("Saves")||[]}saveSave(t,e,s){this.setObject(`Save${t}`,s);const n=this.loadSavesList();n[t]={saveName:e},this.setObject("Saves",n)}}class f extends Image{constructor(t){if(super(),!t)throw new Error("GameImage missing src param");this.src=t,this.data=null,this.isLoaded=!1}async load(){const t=new Promise((e,s)=>{try{const n=()=>e(this);super.onload=n,super.onerror=r=>{console.error(this.src,r),s(new Error(`GameImage failed to load ${this.src}`))},this.complete&&n()}catch(n){s(n)}});try{await t,this.isLoaded=!0,this.setup()}catch(e){throw this.isLoaded=!1,e}return this}setup(){this.data=this.getImageData()}async clone(){const t=new f(this.src);return await t.load(),t}cloneSync(){const t=new f(this.src);return t.load(),t}static getCanvasContext(t,e,s){const n=document.createElement("canvas");n.width=t,n.height=e;const r=n.getContext("2d");return s&&r.drawImage(s,0,0),[n,r]}getCanvasContext(t={}){const{draw:e=!0}=t;return f.getCanvasContext(this.naturalWidth||this.width,this.naturalHeight||this.height,e?this:null)}getImageData(t){return(t||this.getCanvasContext({draw:!0})[1]).getImageData(0,0,this.width,this.height)}getImageDataUri(){const[t]=this.getCanvasContext({draw:!0});return t.toDataURL("image/png")}setSourceByCanvas(t){this.src=t.toDataURL("image/png")}replaceColors(t=[],e=[]){const[s,n]=this.getCanvasContext({draw:!0}),r=this.getImageData(n);for(let i=0;i<r.data.length;i+=4)t.forEach((a,l)=>{const[c,h,m]=a,[u,d,g]=e[l];r.data[i]===c&&r.data[i+1]===h&&r.data[i+2]===m&&(r.data[i]=u,r.data[i+1]=d,r.data[i+2]=g)});n.putImageData(r,0,0),this.setSourceByCanvas(s)}replaceColor(t=[],e=[]){const[s,n]=this.getCanvasContext({draw:!0}),[r,i,a]=t,[l,c,h]=e;let m=0;const u=this.getImageData(n);for(let d=0;d<u.data.length;d+=4)u.data[d]===r&&u.data[d+1]===i&&u.data[d+2]===a&&(u.data[d]=l,u.data[d+1]=c,u.data[d+2]=h,m+=1);return n.putImageData(u,0,0),this.setSourceByCanvas(s),m}}const w=[[255,255,255],[0,0,0]],O=[[238,238,204],[17,17,51]],Q=0;class v extends f{constructor(t,e={},s=16){const n=typeof t=="object",r=n?(t==null?void 0:t.src)||(t==null?void 0:t.url):t;super(r);const i=(n?t==null?void 0:t.atlas:e)||[];this.atlas=[...i];const a=(n?t==null?void 0:t.size:s)||16;this.spriteSize=a,this.sprites={}}async load(){try{await super.load()}catch(t){throw console.error(t),t}}getCoordinates(t){let e=-1,s=-1;if(this.atlas.forEach((n,r)=>{if(!n.names)return;const i=n.names.findIndex(a=>t===a);i!==-1&&(s=i,e=r)}),s===-1||e===-1)throw new Error(`Sprite ${t} not found in atlas`);return[s*this.spriteSize,e*this.spriteSize]}drawImageToContext(t,e,s,n){const[r,i]=this.getCoordinates(t);e.drawImage(this,r,i,this.spriteSize,this.spriteSize,s,n,this.spriteSize,this.spriteSize)}getSubImage(t,e,s=this.spriteSize,n=this.spriteSize,r=void 0,i=void 0){if(!r||!i){const l=f.getCanvasContext(s,n);r=l[0],i=l[1]}i.drawImage(this.sheet,t,e,s,n,0,0,s,n);const a=r.toDataURL("image/png");return new f(a)}parse(){const[t,e]=f.getCanvasContext(this.spriteSize,this.spriteSize);let s=0;Object.entries(this.atlas).forEach(([n,r])=>{let i=0;r.forEach(a=>{const{y:l,names:c}=a;let h=Q;c.forEach(m=>{const u=this.getSubImage(h,l,this.spriteSize,this.spriteSize,t,e);[`sprite-${s}`,`${n}-${i}`,m].forEach(d=>{this.sprites[d]=u}),h+=this.spriteSize,s+=1,i+=1})})})}static makeColorId(t,e=w){const[s=[255,255,255],n=[0,0,0]]=e;return`${t}_${s.join(",")}_${n.join(",")}`}async loadColoredSprite(t,e=w){const s=this.makeColoredSprite(t,e);return await s.load(),s}async loadColorSpriteDataUri(t,e=w){const s=await this.loadColoredSprite(t,e);return s?s.getImageDataUri():""}makeColoredSprite(t,e=w){const[s=[255,255,255],n=[0,0,0]]=e,r=this.get(t);if(!r)throw new Error(`Unknown sprite ${t}`);const i=r.cloneSync();i.replaceColors(O,[s,n]);const a=v.makeColorId(t,e);return this.sprites[a]=i,i}makeColoredSpriteDataUri(t,e=w){return this.makeColoredSprite(t,e).getImageDataUri()}get(t,e){if(!e)return this.sprites[t];const s=v.makeColorId(t,e),n=this.sprites[s];return n||this.makeColoredSprite(t,e)}getDataUri(t,e){const s=this.get(t,e);return s?s.getImageDataUri():""}}class M{constructor(){this.eventListeners={}}on(t,e){let s=this.eventListeners[t];s||(this.eventListeners[t]=new Set,s=this.eventListeners[t]),s.add(e)}off(t,e){const s=this.eventListeners[t];s&&s.delete(e)}trigger(t,e){const s=this.eventListeners[t];s&&s.forEach(n=>n(e))}}const W="command",k="missingCommand",D="mount",U="unmount",C="mapping",_=[W,k,D,U,C],x="keydown",I="keyup";class J extends M{constructor(t={},e={}){super();const{autoMount:s=!0,triggerOnRepeat:n=!1,document:r=window.document}=e;if(this.id=Math.round(Math.random()*99999),this.triggerOnRepeat=!!n,this.mapping={},this.setMapping(t),this.document=r,!this.document.addEventListener)throw new Error("document with addEventListener is required");this.keysDown={},this.commandsDown={},this.keyPressListener=i=>this.handleKeyPress(i),this.keyUpListener=i=>this.handleKeyUp(i),this.setupEventListeners(e),this.nodeNamesDontTrigger=["TEXTAREA","INPUT"],this.nodeNamesAllowDefault=["TEXTAREA","INPUT"],s&&this.mount()}setMapping(t={}){if(typeof t!="object")throw new Error("Invalid type for mapping param");return this.mapping={...t},this.trigger(C),this.mapping}mapKey(t,e){return this.mapping[t]=e,this.trigger(C),!0}mapUnmappedKey(t,e){return this.mapping[t]?!1:this.mapKey(t,e)}unmapKey(t){return this.mapping[t]?!1:(delete this.mapping[t],this.trigger(C),!0)}mount(){this.document.addEventListener(x,this.keyPressListener),this.document.addEventListener(I,this.keyUpListener),this.trigger(D)}unmount(){this.document.removeEventListener(x,this.keyPressListener),this.document.removeEventListener(I,this.keyUpListener),this.trigger(U)}handleKeyPress(t){const{key:e,code:s,keyCode:n,altKey:r,ctrlKey:i,shiftKey:a,metaKey:l,repeat:c}=t,h={code:s,keyCode:n,altKey:r,ctrlKey:i,shiftKey:a,metaKey:l,repeat:c},{nodeName:m}=t.target;if(this.nodeNamesDontTrigger.includes(m))return;if(this.nodeNamesAllowDefault.includes(m)||t.preventDefault(),!c){const d=this.mapping[e];this.keysDown[e]=!0,d&&(this.commandsDown[d]=!0)}(!c||this.triggerOnRepeat)&&this.triggerKey(e,h)}handleKeyUp(t){const{key:e}=t,s=this.mapping[e];this.keysDown[e]=!1,s&&(this.commandsDown[s]=!1)}setupEventListeners(t={}){_.forEach(e=>{t[e]&&this.on(e,t[e])})}triggerCommand(t){this.trigger(W,t)}triggerMissingCommand(t){this.trigger(k,t)}triggerKey(t){const e=this.mapping[t];e?this.triggerCommand(e):this.triggerMissingCommand(t)}getKeysMapped(){return Object.keys(this.mapping)}getCommands(){const t=new Set;return this.getKeysMapped().forEach(e=>t.add(this.mapping[e])),Array.from(t)}isKeyDown(t){return this.keysDown[t]}isCommandDown(t){return this.commandsDown[t]}getKeysDown(){return Object.keys(this.keysDown).filter(t=>this.keysDown[t])}getCommandsDown(){return Object.keys(this.commandsDown).filter(t=>this.commandsDown[t])}clearDown(){this.keysDown={},this.commandsDown={}}}class Z{constructor(t){t||console.warn("No states param"),this.states=t||{},this.kbCommander=new J}on(t,e){this.kbCommander.on(t,e)}setState(t){var s;if(!this.states[t])throw new Error(`Unknown state ${t}`);const e=((s=this.states[t])==null?void 0:s.kb)||{};this.kbCommander.setMapping(e)}}class y{constructor(t){this.allTypes={},this.allTypesArray=[],this.buildAllTypes(t)}static getExtendedType(t={},e={}){let s=t;return t.type&&(e[t.type]?s={...y.getExtendedType(e[t.type],e),...s}:console.error("Could not find type",t.type)),structuredClone(s)}getExtendedType(t={}){return y.getExtendedType(t,this.allTypes)}buildAllTypes(t){this.allTypes={},this.allTypesArray=[],Object.keys(t).sort().forEach(s=>{const n=t[s];if(this.allTypesArray[s]){console.error("Type",s,"already exists and will be skipped.");return}this.allTypes[s]=n,this.allTypesArray.push(n),n.typeKey&&n.typeKey!==s&&console.warn("Existing typeKey does not match",s,"and will be overwritten"),n.entTypeId=this.allTypesArray.length-1,n.typeKey=s}),this.allTypesArray.forEach(s=>{const n=y.getExtendedType(s,this.allTypes);this.allTypes[n.typeKey]=n,this.allTypesArray[n.entTypeId]=n}),this.allTypesArray.forEach(s=>{s.name||(s.name=s.typeKey)})}get(t){return this.allTypes[t]}getTerrainSpriteName(t){const e=this.get(t);if(!e)return console.error("Unknown terrain key",t),"";const{sprite:s,variations:n}=e;if(!n)return s;const r=n?Math.floor(Math.random()*n):"0";return`${s}-${r}`}getEntitySpriteName(t){const e=this.get(t);if(!e)return"";const{sprite:s,variations:n}=e;if(!n)return s;const r=Math.floor(Math.random()*n);return`${s}-${r}`}}class tt{constructor(t){this.entityTypes=t,this.all=[],this.nextEntId=this.all.length}add(t={}){const e=this.entityTypes.getExtendedType(t);this.all.push({...structuredClone(e),entId:this.nextEntId}),this.nextEntId+=1}addActor(t){const{whoId:e=`actor-ent-${this.nextEntId}`}=t;if(this.getActor(e))throw new Error(`Already have an actor with whoId ${e}`);this.add({...t,whoId:e,isActor:!0})}addAvatar(t){this.addActor({...t,type:"avatar",isAvatar:!0})}allAllFromMaps(t){t.reduce((s,n)=>[...s,...n.getEntities()],[]).forEach(s=>{const n=this.entityTypes.getExtendedType(s);n.isActor?this.addActor(n):this.add(n)}),console.log("All Entities",this.all)}getActor(t){return this.all.find(e=>e.whoId===t)}getAvatars(){return this.all.filter(t=>t.isAvatar)}getActors(){return this.all.filter(t=>t.isActor)}getAvatarMapIds(){const t=new Set;return this.getAvatars().forEach(e=>t.add(e.mapId)),[...t]}getActorsOnMap(t){return this.all.filter(e=>e.isActor&&e.mapId===t)}getEntitiesOnMap(t){return this.all.filter(e=>e.mapId===t)}}class E{constructor(t,e={},s=null){if(!t||typeof t!="object")throw new Error("Missing mapData object");this.mapKey=t.mapKey,this.id=t.id,this.globalLegend=Object.freeze(structuredClone(e)),this.entityTypes=s,this.base=Object.freeze(structuredClone(t)),this.time=0,this.exits=E.makeExits(this.base.exits),this.height=this.base.map.length,this.width=this.base.map.reduce((n,r)=>Math.max(n,r.length),0),this.maxX=this.width-1,this.maxY=this.height-1}static makeMaps(t={},e={},s=null){const n=[];return Object.keys(t).sort().forEach(i=>{const a=n.length,l=new E({...t[i],mapKey:i,id:a},e,s);n.push(l)}),n}static makeExits(t={}){return{left:t.left||t.edges||"BLOCK",right:t.right||t.edges||"BLOCK",top:t.top||t.edges||"BLOCK",bottom:t.bottom||t.edges||"BLOCK",up:t.up||"BLOCK",down:t.down||"BLOCK"}}getEntities(){const t=this.id,{map:e,legend:s}=this.getData(),n=Object.keys(s).filter(a=>s[a].length>1),r=n.reduce((a,l)=>{const c=s[l].slice(1).map(h=>typeof h=="string"?{type:h}:h);return{...a,[l]:c}},{}),i=[];return e.forEach((a,l)=>{a.split("").forEach((c,h)=>{n.includes(c)&&r[c].forEach((m,u)=>{i.push({...structuredClone(m),mapId:t,x:h,y:l,origin:{mapId:t,x:h,y:l,legendIndex:u}})})})}),i}isOffEdge(t,e){return t<0||t>this.maxX||e<0||e>this.maxY}getOffEdge(t,e){return t<0?"left":t>this.maxX?"right":e<0?"top":e>this.maxY?"bottom":!1}getData(){const t={...this.globalLegend,...this.base.legend};return{...this.base,legend:t}}getName(){return this.getData().name||this.mapKey}getOverflowEntityType(){var t;return((t=this.getData())==null?void 0:t.overflow)||"void"}getExit(t){return this.exits[t]||"BLOCK"}getLoopedCoordinates(t,e){return[t>0?t%this.width:(t%this.width+this.width)%this.width,e>0?e%this.height:(e%this.height+this.height)%this.height]}getCellData(t,e){const{map:s,legend:n}=this.getData();if(t<0||e<0||s[e]===void 0||s[e][t]===void 0)return null;const r=s[e][t],i=n[r];return i||(console.warn("Missing",r,"at",t,e,s[e]),null)}getTopProperty(t,e,s){const n=this.getCellData(e,s);let r;for(let i=n.length-1;i>=0;i-=1)if(r=n[i],typeof r=="object"&&r[t]!==void 0)return r[t];return null}getTopEntityType(t,e){const s=this.getCellData(t,e);if(!s)return null;if(s.length===0)return this.getOverflowEntityType();const n=s[s.length-1];return typeof n=="string"?n:n.entityTypeKey||n.entityType||n.type||this.getOverflowEntityType()}getTerrainTypeKey(t,e){const s=this.getCellData(t,e);if(!s)return this.getOverflowEntityType();const[n]=s;return n}getTerrainEntity(t,e){const s=this.getTerrainTypeKey(t,e),n=this.entityTypes.getExtendedType({type:s});return console.log(n),n}getEntranceCoordinates(){let[t=0,e=0]=this.getData().entrance||[];return t==="center"?t=Math.floor(this.width/2):t==="left"?t=0:t==="right"&&(t=this.maxX),e==="bottom"?e=this.maxY:e==="top"?e=0:e==="center"&&(e=Math.floor(this.height/2)),[Math.round(t),Math.round(e)]}}class et{constructor(t){this.queue=[],t.forEach(e=>this.add(e)),this.sort(),this.time=0}add(t){if(!t.action){console.warn("Actor does not have action component so cannot be added to schedule",t);return}this.queue.push(t),this.sort()}sort(){this.queue.sort((t,e)=>t.action.cooldown===e.action.cooldown?t.isAvatar?-1:0:t.action.cooldown-e.action.cooldown)}top(){return this.queue[0]}coolToTop(){const t=this.top(),[e,s,n]=t.action,r=n-this.time;return this.time=n,t.action.isWarmingUp=0,{whoId:e,isWarmingUp:s,deltaT:r}}}function st(o=1,t=0){return t+Math.random()*(o-t)}function nt(o,t=0){return Math.floor(st(o,t))}function L(o,t=0){const e=Math.max(o,t)+1;return nt(e,Math.min(o,t))}function N(o){let{success:t=null,message:e=""}=o;const{followUp:s=null,cooldownMultiplier:n=1}=o;return o instanceof Array&&([t,e]=o),{success:t,message:e,followUp:s,cooldownMultiplier:n}}function rt(o,t,e){return[!1,"Not yet implemented."]}function it(o,t,e){return[!1,"Not yet implemented."]}function ot(o,t,e){return[!1,"Not yet implemented."]}function at(o,t,e){return this.enter(o,t,e)}function lt(o,t){const e=t.getTopProperty("enter",o.x,o.y);if(!e){const s=this.klimb(o,t),{success:n}=N(s);return n?s:[!1,"There is nothing to enter."]}return o.canEnter?{success:!0,message:`You enter ${t.getName()}.`,followUp:["moveActorMap",o,e]}:[!1,"You cannot enter."]}function ct(o,t,e){return[!1,"Not yet implemented."]}function ht(o,t,e){return[!1,"Not yet implemented."]}function dt(o,t,e){return[!1,"Not yet implemented."]}function ut(o,t,e){return[!1,"Not yet implemented."]}function mt(o,t,e){return[!1,"Without precise calculations you could fly right through a star!"]}function pt(o,t,e){return[!1,"Not yet implemented."]}function ft(o,t,e){return[!1,"Not yet implemented."]}function gt(o,t,e){return[!1,"Not yet implemented."]}function wt(o,t,e){return[!1,"Not yet implemented."]}function yt(o,t,e){return[!1,"You jump. Wee!"]}function vt(o,t,e){return[!1,"Not yet implemented."]}function Ct(o,t,e,s){const n=t.getTopProperty("klimb",o.x,o.y);if(!n)return[!1,"There is nothing to climb here."];if(s&&n!==s)return[!1,`Cannot climb ${s} here.`];const r=t.getExit(n);return r?{success:!0,message:`You climb ${n}.`,followUp:["moveActorMap",o,r,!0]}:[!1,"Cannot exit the area."]}function Et(o,t,e){return[!1,"You pretend to be a rocket. Wee!"]}function bt(o,t,e){return[!1,"Not yet implemented."]}function Tt(o,t,e,s){return[!1,"You do not have a mortar and pestle."]}function St(o,t,e,s){const n=z[s];if(!n)return[!1,"Invalid direction to move"];const r=o.x+n[0],i=o.y+n[1],a=t.getOffEdge(r,i);if(!a){const m=[t.getTerrainEntity(r,i).obstacleId,...e.filter(d=>d.x===r&&d.y===i).map(d=>d.obstacleId)].map(d=>{var g;return((g=o==null?void 0:o.move)==null?void 0:g.transversal[d])||0}),u=Math.min(...m);return u?(o.x=r,o.y=i,{success:!0,message:`You move ${s}`,cooldownMultiplier:1/u}):[!1,`Blocked ${s}.`]}if(!o.canExit)return[!1,"You cannot exit."];const l=t.getExit(a);if(l instanceof Array)return{success:!0,message:"You leave.",followUp:["moveActorMap",o,l]};if(l==="BLOCK")return[!1,`Blocked ${s}.`];if(l==="LOOP"){const[c,h]=t.getLoopedCoordinates(r,i);return o.x=c,o.y=h,[!0,`You move ${s}`]}return[!1,"You cannot move."]}function At(o,t,e){return[!1,"Not yet implemented."]}function xt(o,t,e){return[!1,"You have no powers of negation yet."]}function It(o,t,e,s){return[!1,"Not yet implemented."]}function Lt(o,t,e){return[!1,"Not yet implemented."]}function Mt(){return[!0,"You wait a moment."]}function Wt(o,t,e,s){return[!1,"Not yet implemented."]}function kt(o,t,e){return[!1,"Not yet implemented."]}function Dt(o,t,e){if(!o.plan)return p.enqueueWithoutWarmup(o,"pass"),[!1,"No thinking."];const{randomMove:s=.5}=o.plan;if(Math.random()<s){const n=["up","down","left","right"],r=Math.floor(Math.random()*4)+1;p.enqueueWithoutWarmup(o,"move",n[r])}else p.enqueueWithoutWarmup(o,"pass");return[!0,""]}function Ut(o,t,e,s){return[!1,"Not yet implemented."]}function Nt(o,t,e,s){return[!1,"Not yet implemented."]}function Rt(o,t,e){return[!1,"Not yet implemented."]}function Kt(o,t,e,s){return[!1,"Not yet implemented."]}function zt(o,t,e,s){return[!1,"Not yet implemented."]}function Yt(o,t,e,s){return[!1,"Not yet implemented."]}function Pt(o,t,e,s){return[!0,`You prepare to ${s}.`]}function $t(o,t,e){return[!1,"You yell loudly."]}const T={board:rt,camp:it,cast:ot,engage:at,enter:lt,dismount:ct,fight:ht,fire:dt,get:ut,heal:mt,hyperjump:pt,ignite:ft,investigate:gt,junk:wt,jump:yt,jimmy:vt,klimb:Ct,launch:Et,locate:bt,mix:Tt,move:St,navigate:At,negate:xt,open:It,offer:Lt,pass:Mt,pickpocket:Wt,peer:kt,plan:Dt,push:Ut,ready:Nt,summon:Rt,talk:Kt,transact:zt,unlock:Yt,warmup:Pt,yell:$t},qt=Object.keys(T);class p{constructor(t={},e={}){this.actionsConfig=structuredClone(t);const{actionCooldown:s=Y,actionCooldownRandom:n=0,actionWarmup:r=P,actionWarmupRandom:i=0}=e;this.actionCooldown=s,this.actionCooldownRandom=n,this.actionWarmup=r,this.actionWarmupRandom=i}static has(t){return qt.includes(t.toLowerCase())}static hasAction(t){return t.action?t.action.queue&&t.action.queue.length:!1}static hasReadyAction(t,e){return p.hasAction(t)?t.action.cooldown<=e:!1}static isWaitingForAction(t,e){return!p.hasAction(t)&&t.action.cooldown<=e}static enqueueWithoutWarmup(t,e,s){t.action.queue.push([e,s])}enqueue(t,e,s){this.getWarmupTime(e)&&t.action.queue.push(["warmup",e]),t.action.queue.push([e,s])}perform(t,e,s,n){if(!p.hasReadyAction(t,n))return[!1,"No ready actions."];const{action:r}=t,i=r.queue.shift(),[a,l=""]=i;if(!a)throw new Error("Missing actionName");if(!T[a])throw new Error(`Invalid actionName ${a}`);const c=T[a](t,e,s,l),{success:h,message:m,followUp:u,cooldownMultiplier:d}=N(c);if(h){const g=this.getCooldownTime(a,l)*d;r.cooldown+=g}return[h,m,u]}getWarmupTime(t){var e;return(((e=this.actionsConfig[t])==null?void 0:e.warmup)||0)*(this.actionWarmup+L(this.actionWarmupRandom))}getCooldownTime(t,e){var s;return t==="warmup"?this.getWarmupTime(e):(((s=this.actionsConfig[t])==null?void 0:s.cooldown)||0)*(this.actionCooldown+L(this.actionCooldownRandom))}}const jt=o=>new Promise(t=>{setTimeout(t,o)});class Ft{constructor(t={},e={},s=null){this.worldComm=s,this.entityTypes=new y(t==null?void 0:t.entityTypes),this.actions=new p(e,t==null?void 0:t.timing),this.time=0,this.maps=E.makeMaps((t==null?void 0:t.maps)||{},t==null?void 0:t.globalLegend,this.entityTypes),this.connections={},this.ents=new tt(this.entityTypes),this.schedulerQueues={},this.worldLog=[],this.deltas=[],this.ents.allAllFromMaps(this.maps)}async load(){const t=this.maps.findIndex(e=>e.mapKey==="overworld");this.ents.addAvatar({type:"avatar",whoId:"my-avatar-1",mapId:t,x:10,y:5,stats:{}}),this.time=100,this.maps.forEach(e=>{e.time=this.time}),this.ents.getActors().forEach(e=>{e.action.cooldown=this.time}),this.updateAllClients()}connect(t,e={}){this.connections[t]={visibleWorldHeight:3,visibleWorldWidth:3,...e,commandQueue:[]}}getActor(t){const e=this.ents.getActor(t);return e||console.warn("Could not find",t),e}getActorMapId(t){return this.getActor(t).mapId}getActorMap(t){return this.getMap(this.getActorMapId(t))}getMap(t){return typeof t=="number"?this.maps[t]:this.maps.find(e=>e.mapKey===t)}getMapData(t){var e;return((e=this.maps[t])==null?void 0:e.getData())||{}}getTerrainSpriteAt(t,e,s){const r=this.getMap(t).getTerrainTypeKey(e,s);return this.entityTypes.getTerrainSpriteName(r)}getEntitySpriteAt(t,e,s){const r=this.ents.getEntitiesOnMap(t.id).find(i=>i.x===e&&i.y===s);return r?r.sprite:""}getTerrainSprites(t,e=0,s=0,n=10,r=10){const i=[];for(let a=0;a<r;a+=1){i[a]||(i[a]=[]);for(let l=0;l<n;l+=1)i[a][l]=this.getTerrainSpriteAt(t,e+l,s+a)}return i}getPropsSprites(t,e=0,s=0,n=10,r=10){const i=this.getMap(t),a=[];for(let l=0;l<r;l+=1){a[l]||(a[l]=[]);for(let c=0;c<n;c+=1)a[l][c]=this.getEntitySpriteAt(i,e+c,s+l)}return a}async getParty(t){const{centerVisibleWorldX:e,centerVisibleWorldY:s}=this.getVisibleWorldDimensions(t);return{avatar:{...this.getActor(t),visibleWorldX:e,visibleWorldY:s}}}getVisibleWorldDimensions(t){const e=this.connections[t],{visibleWorldHeight:s,visibleWorldWidth:n}=e,r=this.getActor(t),i=Math.floor(n/2),a=Math.floor(s/2),l=r.x,c=r.y,h=l-i,m=c-a;return{w:n,h:s,centerVisibleWorldX:i,centerVisibleWorldY:a,centerWorldX:l,centerWorldY:c,worldLeftX:h,worldTopY:m}}async getVisibleWorld(t){if(!t)throw new Error("Need a whoId for getting visible world");const{w:e,h:s,worldLeftX:n,worldTopY:r}=this.getVisibleWorldDimensions(t),i=this.getActorMapId(t);return{terrain:{sprites:this.getTerrainSprites(i,n,r,e,s)},props:{sprites:this.getPropsSprites(i,n,r,e,s)},items:[],actors:[]}}updateAllClients(){Object.keys(this.connections).forEach(t=>this.updateClient(t))}async updateClient(t){const e=await this.getVisibleWorld(t),s=await this.getParty(t);this.worldComm.sendDataToClient({visibleWorld:e,party:s})}async performAction(t,e){const{mapId:s,whoId:n}=t;if(!p.hasReadyAction(t,e))return null;const r=this.getMap(s),i=this.ents.getEntitiesOnMap(s),[a,l,c]=this.actions.perform(t,r,i,e);return c&&this[c[0]](...c.slice(1)),this.connections[n]&&await this.updateClient(n),{mapId:s,mapTime:e,success:a,message:l,whoId:n,worldTime:this.time}}getSimMapIds(){return this.ents.getAvatarMapIds()}async sim(t=1){this.time+=t;let e=0;console.log("world sim",this.time);const s=this.getSimMapIds();for(let n=0;n<s.length;n+=1){const r=s[n],i=this.getMap(r);let a=!1;for(;i.time<this.time&&!a;)a=await this.simMap(r,t);a&&(e+=1)}e?this.updateAllClients():(await jt(20),this.sim(t))}async simMap(t,e){const s=this.getMap(t);s.time=Math.min(this.time,s.time+e);const n=this.ents.getActorsOnMap(t);this.schedulerQueues[t]||(this.schedulerQueues[t]=new et(n));const r=this.schedulerQueues[t],i=r.top();if(p.isWaitingForAction(i,s.time)){if(i.isAvatar)return console.log("	Top actor is avatar and has nothing to do.",i),!0;this.actions.enqueue(i,"plan")}const a=await this.performAction(i,s.time);return a&&(a.success&&this.deltas.push(a),r.sort()),!1}moveActorMap(t,e=[],s=!1){const[n,r,i]=e,a=this.getMap(n);if(t.mapId=a.id,s){typeof r=="number"&&typeof i=="number"?(t.x+=r,t.y+=i):console.error("invalid coordinates");return}if(typeof r=="number"&&typeof i=="number")t.x=r,t.y=i;else{const[l,c]=a.getEntranceCoordinates();t.x=l,t.y=c}}ping(){return[!0,"ping"]}async runCommand(t,e){const s=t instanceof Array?[...t]:String(t).toLowerCase().split(" "),r={hole:"camp",inform:"investigate",search:"investigate",steal:"pickpocket",wear:"ready",equip:"ready",exit:"dismount",mount:"board",stats:"ztats",go:"move"}[s[0]];r&&(s[0]=r);const i=s[0],a=["chat","descend","exit","karma","look","map","navigate","party","ping","quicksave","quit","view","zstats"],l=s.slice(1),c=this.getActor(e);if(this[i]){if(!a.includes(i))return{success:!1,message:`Command not allowed '${i}'`};const[h,m]=await this[i](c,...l);return this.sim(),{success:h,message:m}}return p.has(i)?c.action?(this.actions.enqueue(c,i,l.join(" ")),this.sim(),{success:!0,message:"Action queued"}):{success:!1,message:`${e} cannot do actions.`}:(console.error("Invalid command",i),{success:!1,message:`Invalid command '${i}'`})}}class Bt extends M{constructor(t={}){super(),this.localWorld=null,this.visibleWorldHeight=0,this.visibleWorldWidth=0,t.world&&this.startLocalWorld(t.world,t.actions)}async startLocalWorld(t,e){this.localWorld=new Ft(t,e,this),window.world=this.localWorld}async connect(t,e,s){this.localWorld.connect(t,{visibleWorldHeight:s,visibleWorldWidth:e})}async load(){await this.localWorld.load()}async sendCommandToWorld(t,e){if(!t)return console.warn("Cannot send a blank command"),[];if(!e)throw new Error("Must send a command on behalf of a user (whoId missing)");const s=await this.localWorld.runCommand(t,e),n=await this.localWorld.getVisibleWorld(e),r=await this.localWorld.getParty(e);return[s,n,r]}async sendDataToClient(t){this.trigger("data",t)}}class S{constructor(t={}){var e,s,n,r,i,a;this.states=t.states||{},this.inputCtrl=new Z(this.states),this.screenWidth=((e=t.screen)==null?void 0:e.width)||320,this.screenHeight=((s=t.screen)==null?void 0:s.height)||200,this.screenSelector=((n=t.screen)==null?void 0:n.containerSelector)||"#wulf-screen",this.mainCanvasId=((r=t.screen)==null?void 0:r.mainCanvasId)||"wulf-main-canvas",this.gameCanvas=new X(this.mainCanvasId,[this.screenWidth,this.screenHeight]),this.gameStorage=new H(t.gameName||"WULF"),this.worldComm=new Bt({world:t.world,actions:t.actions}),this.ss=new v((i=t==null?void 0:t.spritesheets)==null?void 0:i.main),this.fontsSpritesheet=new v((a=t==null?void 0:t.spritesheets)==null?void 0:a.fonts),this.textCtrl=new b(this.fontsSpritesheet),this.mainConsole=new V(t.mainConsole,this.fontsSpritesheet),this.mapFocus=[0,0],this.mapDisplaySizeX=20,this.mapDisplaySizeY=10,this.visibleWorld={},this.party={},this.avatarWhoId=null}static waitForDom(){return new Promise(t=>{window.addEventListener("DOMContentLoaded",()=>t())})}adjustScreenSize(){const t=window.innerWidth,e=window.innerHeight,s=Math.floor(Math.min(t/this.screenWidth,e/this.screenHeight)),n=this.screenWidth*s,r=this.screenHeight*s,i=document.querySelector(this.screenSelector);i.style.width=`${n}px`,i.style.height=`${r}px`}async loadGame(){this.avatarWhoId="my-avatar-1",this.worldComm.load()}async sendWorldCommand(t){const[e,s,n]=await this.worldComm.sendCommandToWorld(t,this.avatarWhoId);return e.message&&this.mainConsole.print(e.message),this.handleIncomingData({visibleWorld:s,party:n}),e}refocus(){var t,e;this.mapFocus[0]=((t=this.party)==null?void 0:t.avatar.visibleWorldX)||0,this.mapFocus[1]=((e=this.party)==null?void 0:e.avatar.visibleWorldY)||0}async executeCommand(t){console.log("Command:",t);const e={vol:"volume"},s={volume:a=>{console.log("volume",a)}},n=String(t).toLowerCase().split(" "),r=e[n[0]];r&&(n[0]=r);const i=s[n[0]];if(i){const a=n.slice(1);await i(...a);return}await this.sendWorldCommand(n)}getMapFocusTopLeft(){const[t,e]=this.mapFocus;return[t-Math.floor(this.mapDisplaySizeX/2),e-Math.floor(this.mapDisplaySizeY/2)]}drawSprite(t,e,s){t&&this.ss.drawImageToContext(t,this.gameCanvas.ctx,e*this.ss.spriteSize,s*this.ss.spriteSize)}drawSprites2d(t){t.forEach((e,s)=>{e.forEach((n,r)=>{this.drawSprite(n,r,s)})})}drawSpritesArray(t=[]){t.forEach(e=>{const[s,n,r]=e;this.drawSprite(s,n,r)})}drawTerrain(){this.drawSprites2d(this.visibleWorld.terrain.sprites,"terrain")}drawProps(){this.drawSprites2d(this.visibleWorld.props.sprites,"terrain")}drawAvatar(){const{visibleWorldX:t,visibleWorldY:e,sprite:s}=this.party.avatar;this.drawSprite(s,t,e)}drawMap(){this.drawTerrain(),this.drawProps(),this.drawAvatar()}handleIncomingData(t){const{visibleWorld:e,party:s}=t;this.visibleWorld=Object.freeze(structuredClone(e)),this.party=Object.freeze(structuredClone(s)),this.refocus(),this.drawMap()}async setup(){await S.waitForDom(),await this.gameCanvas.setup(),this.adjustScreenSize(),await this.mainConsole.setup(this.gameCanvas),this.mainConsole.print("A flash of red..."),this.mainConsole.print("You have awoken in a strange world."),this.loadGame(),this.worldComm.on("data",t=>this.handleIncomingData(t)),await this.worldComm.connect(this.avatarWhoId,this.mapDisplaySizeX,this.mapDisplaySizeY),await this.sendWorldCommand("ping",this.avatarWhoId),this.drawMap(),this.inputCtrl.on("command",t=>this.executeCommand(t)),this.inputCtrl.on("missingCommand",(...t)=>console.warn("Missing command",t)),this.inputCtrl.setState("travel")}async start(){await this.setup(),console.log("%c☥","font-size: 300%; color: #ff0;")}}const R=new S(G);R.start();window.g=R;
